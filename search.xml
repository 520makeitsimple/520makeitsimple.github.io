<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaWeb</title>
      <link href="2021/03/12/JavaWeb/"/>
      <url>2021/03/12/JavaWeb/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h1 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h1><h2 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h2><h3 id="1-1、前言"><a href="#1-1、前言" class="headerlink" title="1.1、前言"></a>1.1、前言</h3><p>Web：开发  </p><ul><li><p>静态Web</p><blockquote><ul><li>HTML,CSS</li><li>提供给所有人看的数据始终不会发生变化！</li></ul></blockquote></li><li><p>动态Web</p><blockquote><ul><li>几乎所有网站都是动态Web开发的。</li><li>提供给所有人看的数据始终会发生变化，随时间地点不同，数据发生变化！  </li><li>技术栈：Servlet/JSP、ASP、PHP。</li></ul></blockquote></li></ul><p>在Java中，动态web资源开发的技术统称为JavaWeb。</p><h3 id="1-2、Web应用程序"><a href="#1-2、Web应用程序" class="headerlink" title="1.2、Web应用程序"></a>1.2、Web应用程序</h3><p>web应用程序：可以提供浏览器访问的程序：</p><ul><li><p>a.html、b.html….多个web资源，这些web资源可以被外界访问，对外界提供服务。</p></li><li><p>你们能访问到的任何一个页面或者资源，都存在于这个世界某一台计算机上。</p></li><li><p>URL</p></li><li><p>这个统一的web资源会被放在同一个文件下，web应用程序–&gt;Tomcat：服务器</p></li><li><p>一个web应用有多个部分组成(静态web，动态web):</p><blockquote><ul><li>html,css,js</li><li>jsp,servlet</li><li>Java程序</li><li>jar包</li><li>配置文件</li></ul></blockquote></li></ul><p>web应用程序编写完毕后，若想提供给外界访问，需要一个服务器来统一管理。</p><h3 id="1-3、静态web"><a href="#1-3、静态web" class="headerlink" title="1.3、静态web"></a>1.3、静态web</h3><ul><li><em>.htm,</em>.html这些都是网页的后缀，如果服务器上一直存在这些东西，我们就可以直接进行读取。</li></ul><p><img src="https://gitee.com/makeitsimple/picture-bed/raw/master/img/%E9%9D%99%E6%80%81web.png" alt="请求与交换"></p><ul><li>静态web存在的缺点：<blockquote><ul><li>web页面无法动态更新，所有用户看到都是同一个页面<blockquote><ul><li>轮播图，点击特效：伪动态</li><li>JavaScript[实际开发中，用的最多]</li><li>VBScipt</li></ul></blockquote></li></ul></blockquote></li></ul><ul><li>他无法和数据库交互(数据无法持久化，用户无法交互)</li></ul><h3 id="1-4、动态web"><a href="#1-4、动态web" class="headerlink" title="1.4、动态web"></a>1.4、动态web</h3><p>页面会动态展示，不同的人会展示不同的页面。</p><p><img src="https://gitee.com/makeitsimple/picture-bed/raw/master/img/%E5%8A%A8%E6%80%81web.png" alt="动态web1"></p><p>缺点：  </p><blockquote><ul><li>假如服务器的动态web资源出现了错误，我们需要重新编写我们的后台程序，重新发布。<br>优点：  </li></ul></blockquote><ul><li>web页面可以动态更新，所有用户看到的都不是同一个页面</li><li>它可以与数据库交互(数据持久化，列如：注册、商品信息)</li></ul><p><img src="https://gitee.com/makeitsimple/picture-bed/raw/master/img/%E5%8A%A8%E6%80%81web2.png" alt="动态web2"></p><h2 id="2、web服务器"><a href="#2、web服务器" class="headerlink" title="2、web服务器"></a>2、web服务器</h2><h3 id="2-1、技术讲解"><a href="#2-1、技术讲解" class="headerlink" title="2.1、技术讲解"></a>2.1、技术讲解</h3><h4 id="ASP"><a href="#ASP" class="headerlink" title="ASP"></a>ASP</h4><blockquote><ul><li>微软：国内最早流行的就是ASP</li><li>在HTML中嵌入VB的脚本,ASP+com;</li><li>在ASP开发中，基本一个页面都有几千行的业务代码，页面极其混乱</li><li>维护成本高</li><li>C#</li><li>IIS</li></ul></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;</span><br><span class="line">        &lt;h1&gt;&lt;&#x2F;h1&gt;</span><br><span class="line">        &lt;h1&gt;&lt;h1&gt;</span><br><span class="line">            &lt;%</span><br><span class="line">            System.out.println(&quot;hello&quot;)</span><br><span class="line">            %&gt;</span><br><span class="line">        &lt;&#x2F;h1&gt;&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure><h4 id="php"><a href="#php" class="headerlink" title="php"></a>php</h4><ul><li>PHP开发速度很快，功能很强大，跨平台，代码简单(70%,WP)</li><li>无法承载大访问量的情况</li></ul><h4 id="JSP-Servlet"><a href="#JSP-Servlet" class="headerlink" title="JSP/Servlet"></a>JSP/Servlet</h4><p>B/S：浏览和服务器<br>C/S:客户端和服务器  </p><ul><li>sum公司主推的B/S架构  </li><li>基于Java语言的(所有公司，或者一些大的开源组件，都是用Java写的)</li><li>可以承载三高问题带来的影响  </li><li>语法像ASP，ASP–&gt;JSP,加强市场强度</li></ul><h3 id="2-2、web服务器"><a href="#2-2、web服务器" class="headerlink" title="2.2、web服务器"></a>2.2、web服务器</h3><p>服务器是一种被动的操作，用来处理用户的一些请求和给用户一些响应信息。</p><h4 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h4><p><img src="https://gitee.com/makeitsimple/picture-bed/raw/master/img/Tomcat.png" alt="Tomcat"><br>Tomcat是Apache 软件基金会（Apache Software Foundation）的Jakarta 项目中的一个核心项目，最新的Servlet 和JSP 规范总是能在Tomcat 中得到体现，Tomcat 5支持最新的Servlet 2.4 和JSP 2.0 规范。因为Tomcat 技术先进、性能稳定，而且免费，因而深受Java 爱好者的喜爱并得到了部分软件开发商的认可，成为目前比较流行的Web 应用服务器。<br>Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选。对于一个初学者来说，可以这样认为，当在一台机器上配置好Apache 服务器，可利用它响应HTML（标准通用标记语言下的一个应用）页面的访问请求。<br>目前Tomcat最新版本为9.0.41。</p><h2 id="3、Tomcat"><a href="#3、Tomcat" class="headerlink" title="3、Tomcat"></a>3、Tomcat</h2><h4 id="3-1、配置文件作用"><a href="#3-1、配置文件作用" class="headerlink" title="3.1、配置文件作用"></a>3.1、配置文件作用</h4><p><img src="https://gitee.com/makeitsimple/picture-bed/raw/master/img/tomcat%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.png" alt="Tomcat2"></p><h4 id="3-2、Tomcat启动关闭"><a href="#3-2、Tomcat启动关闭" class="headerlink" title="3.2、Tomcat启动关闭"></a>3.2、Tomcat启动关闭</h4><p><img src="https://gitee.com/makeitsimple/picture-bed/raw/master/img/tomcat%E5%90%AF%E5%8A%A8.png" alt="tomcat3">  </p><blockquote><ul><li>访问测试：<a href="http://localhost:8080/">http://localhost:8080/</a></li></ul></blockquote><h4 id="3-3、配置"><a href="#3-3、配置" class="headerlink" title="3.3、配置"></a>3.3、配置</h4><p><img src="https://gitee.com/makeitsimple/picture-bed/raw/master/img/xml.png" alt="tomcat4"></p><blockquote><p>可以配置启动的端口号</p><blockquote><ul><li>tomcat的端口号为：8080</li><li>mysql：3306</li><li>http：80</li><li>https：443</li></ul></blockquote></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;Connector port&#x3D;&quot;8080&quot; protocol&#x3D;&quot;HTTP&#x2F;1.1&quot;&gt;</span><br><span class="line">            connectionTimeout&#x3D;&quot;20000&quot;</span><br><span class="line">            redirectPort&#x3D;&quot;8443&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure><p>可以配置主机的名称</p><ul><li>默认的主机名为：localhost–&gt;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;Host name&#x3D;&quot;www.pmy.com&quot; appBase&#x3D;&quot;webapps&quot;</span><br><span class="line">        unpackWARs&#x3D;&quot;true&quot; autoDeploy&#x3D;&quot;true&quot;&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-4、发布一个网站"><a href="#3-4、发布一个网站" class="headerlink" title="3.4、发布一个网站"></a>3.4、发布一个网站</h4><p>网站应该有的结构：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">--webapps:Tomcat服务器的web目录</span><br><span class="line">    -ROOT</span><br><span class="line">    -kuangstudy:网站的目录名</span><br><span class="line">        -WEB-TNF</span><br><span class="line">            -classes：Java程序</span><br><span class="line">            -lib：web应用所依赖的jar包</span><br><span class="line">            -web。xml：网站配置文件</span><br><span class="line">        -index.html:默认主页</span><br><span class="line">        -static</span><br><span class="line">            -css</span><br><span class="line">            -js</span><br><span class="line">            -img</span><br><span class="line">            ....等。</span><br></pre></td></tr></table></figure><h4 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h4><p>网站是任何进行访问的！</p><ol><li>输入一个域名，回车。</li><li>检查本机的hosts配置文件下有没有这个域名的映射；<blockquote><ol><li>有：直接返回对应的ip地址</li><li>没有：去DNS服务器找，找到的话就返回，找不到就返回找不到；<br><img src="https://gitee.com/makeitsimple/picture-bed/raw/master/img/DNS.png" alt="DNS"></li></ol></blockquote></li></ol><h2 id="4、Http"><a href="#4、Http" class="headerlink" title="4、Http"></a>4、Http</h2><h3 id="4-1、什么是Http"><a href="#4-1、什么是Http" class="headerlink" title="4.1、什么是Http"></a>4.1、什么是Http</h3><p>超文本传输协议（Hypertext Transfer Protocol，HTTP）是一个简单的请求-响应协议，它通常运行在TCP之上。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应。请求和响应消息的头以ASCII形式给出；而消息内容则具有一个类似MIME的格式。这个简单模型是早期Web成功的有功之臣，因为它使开发和部署非常地直截了当。  </p><ul><li>文本：html、字符串…</li><li>超文本：图片、音乐、视频、定位、地图…</li><li>80</li></ul><p>Https:安全的</p><ul><li>443</li></ul><h3 id="4-2、两个时代"><a href="#4-2、两个时代" class="headerlink" title="4.2、两个时代"></a>4.2、两个时代</h3><ul><li><p>http1.0</p><blockquote><ul><li>HTTP/1.0:客户端可以与web服务器连接后，只能获得一个web资源，断开连接。</li></ul></blockquote></li><li><p>http2.0</p><blockquote><ul><li>HTTP/2.0:客户端可以与web服务器连接后，可以获得多个web资源。</li></ul></blockquote></li></ul><h3 id="4-3、Http请求"><a href="#4-3、Http请求" class="headerlink" title="4.3、Http请求"></a>4.3、Http请求</h3><ul><li>客户端–&gt;发请求(Request)–&gt;服务器<br>例子：百度<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Request URL: https:&#x2F;&#x2F;www.baidu.com&#x2F;   请求地址</span><br><span class="line">Request Method: GET                   get方法&#x2F;post方法</span><br><span class="line">Status Code: 200 OK                   装态码：200</span><br><span class="line">Remote(远程) Address: 14.215.177.39:443</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Accept: text&#x2F;plain, </span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh-TW;q&#x3D;0.9,zh;q&#x3D;0.8,en-US;q&#x3D;0.7,en;q&#x3D;0.6</span><br><span class="line">Connection: keep-alive</span><br></pre></td></tr></table></figure><h4 id="请求行"><a href="#请求行" class="headerlink" title="请求行"></a>请求行</h4></li><li>请求行中的请求方式：GET</li><li>请求方式：Get、post<blockquote><ul><li>get:请求参数比较少，大小有限制，会在浏览器的URL地址栏显示数据内容，不安全，但是高效</li><li>post:请求参数没有限制，大小没有限制，不会在浏览器的URL地址栏显示数据内容，安全，但不高效</li></ul></blockquote><h4 id="消息头"><a href="#消息头" class="headerlink" title="消息头"></a>消息头</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Accept:告诉浏览器，它支持的数据类型</span><br><span class="line">Accent-Encoding：支持那种编码格式</span><br><span class="line">Accent-Language：告诉浏览器，它的语言环境</span><br><span class="line">Cache-Control：缓存控制</span><br><span class="line">Connection：告诉浏览器，请求完成是断开还是保持链接</span><br><span class="line">HOST：主机...</span><br></pre></td></tr></table></figure><h3 id="4-4、Http响应"><a href="#4-4、Http响应" class="headerlink" title="4.4、Http响应"></a>4.4、Http响应</h3></li><li>服务器–&gt;响应–&gt;客户端<br>例子：百度<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Cache-Control: private                    缓存控制</span><br><span class="line">Connection: keep-alive                    连接</span><br><span class="line">Content-Encoding: gzip                    编码</span><br><span class="line">Content-Type: text&#x2F;html;                  类型</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h4></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Accept:告诉浏览器，它支持的数据类型</span><br><span class="line">Accent-Encoding：支持那种编码格式</span><br><span class="line">Accent-Language：告诉浏览器，它的语言环境</span><br><span class="line">Cache-Control：缓存控制</span><br><span class="line">Connection：告诉浏览器，请求完成是断开还是保持链接</span><br><span class="line">HOST：主机...</span><br><span class="line">Refresh：告诉客户端，多久刷新一次</span><br><span class="line">Location：让网页重新定位</span><br></pre></td></tr></table></figure><h4 id="响应状态码"><a href="#响应状态码" class="headerlink" title="响应状态码"></a>响应状态码</h4><ul><li><p>200:请求成功</p></li><li><p>3xx:请求重定向</p></li><li><p>4xx:404找不到资源</p><blockquote><ul><li>资源不存在</li></ul></blockquote></li><li><p>5xx:500服务器代码错误、502网关错误</p></li></ul><h3 id="面试题-1"><a href="#面试题-1" class="headerlink" title="面试题"></a>面试题</h3><p>当浏览器地址栏输入地址按下回车的一瞬间页面能够展示回来，经历了什么过程？</p><h2 id="5、Maven"><a href="#5、Maven" class="headerlink" title="5、Maven"></a>5、Maven</h2><p>我们目前用来就是方便导入jar包的！<br>Maven的核心思想：约定大于配置</p><ul><li>有约束，不要去违反。<br>Maven会规定好你该如何去编写我们的Java代码，必须要按照这个规范来；  </li></ul><h3 id="5-1、下载安装"><a href="#5-1、下载安装" class="headerlink" title="5.1、下载安装"></a>5.1、下载安装</h3><p><img src="https://gitee.com/makeitsimple/picture-bed/raw/master/img/maven.png" alt="maven1"></p><p>下载完成后，解压就可以了。  </p><h3 id="5-2、配置环境变量"><a href="#5-2、配置环境变量" class="headerlink" title="5.2、配置环境变量"></a>5.2、配置环境变量</h3><p>配置如下配置：</p><ul><li>M2_HOME               maven目录下的bin目录</li><li>MAVEN_HOME            maven的目录</li><li>在系统的path中配置%MAVEN_HOME%\bin</li></ul><p><img src="https://gitee.com/makeitsimple/picture-bed/raw/master/img/maven%E9%85%8D%E7%BD%AE.png" alt="maven2"></p><p>测试是否成功：<br><img src="https://gitee.com/makeitsimple/picture-bed/raw/master/img/test.png" alt="test"></p><h3 id="5-3、阿里云镜像"><a href="#5-3、阿里云镜像" class="headerlink" title="5.3、阿里云镜像"></a>5.3、阿里云镜像</h3><ul><li>镜像：mirrors<blockquote><ul><li>作用加速我们的下载</li></ul></blockquote></li></ul><p>国内建议用阿里云的镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;nexus-aliyun&lt;&#x2F;id&gt;</span><br><span class="line">      &lt;mirrorOf&gt;* , !jeecg, !jeecg-snapshots &lt;&#x2F;mirrorOf&gt;</span><br><span class="line">      &lt;name&gt;Nexus aliyun&lt;&#x2F;name&gt;</span><br><span class="line">      &lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&lt;&#x2F;url&gt;</span><br><span class="line">&lt;&#x2F;mirror&gt;</span><br></pre></td></tr></table></figure><h3 id="5-4、本地仓库"><a href="#5-4、本地仓库" class="headerlink" title="5.4、本地仓库"></a>5.4、本地仓库</h3><p><img src="%3Chttps://gitee.com/makeitsimple/picture-bed/raw/master/img/%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93.png" alt="maven3"></p><h3 id="5-6、在IDEA中使用Maven"><a href="#5-6、在IDEA中使用Maven" class="headerlink" title="5.6、在IDEA中使用Maven"></a>5.6、在IDEA中使用Maven</h3><p>创建一个Maven项目<br><img src="https://gitee.com/makeitsimple/picture-bed/raw/master/img/%E5%88%9B%E5%BB%BAmaven%E9%A1%B9%E7%9B%AE.png" alt="maven4"></p><p>没有用模板创建的干净的项目<br><img src="https://gitee.com/makeitsimple/picture-bed/raw/master/img/%E5%B9%B2%E5%87%80maven.png" alt="maven5"><br>用了模板的项目<br><img src="https://gitee.com/makeitsimple/picture-bed/raw/master/img/%E6%A8%A1%E6%9D%BF.png" alt="maven6"></p><h3 id="5-7、配置tomcat"><a href="#5-7、配置tomcat" class="headerlink" title="5.7、配置tomcat"></a>5.7、配置tomcat</h3><p><img src="https://gitee.com/makeitsimple/picture-bed/raw/master/img/%E9%85%8D%E7%BD%AEtomcat.png" alt="tomcat1"></p><h2 id="6、Servlet"><a href="#6、Servlet" class="headerlink" title="6、Servlet"></a>6、Servlet</h2><h3 id="6-1、Servlet简介"><a href="#6-1、Servlet简介" class="headerlink" title="6.1、Servlet简介"></a>6.1、Servlet简介</h3><ul><li>Servlet技术Sun公司开发的动态Web技术</li><li>Sun在这些API中提供一个接口叫做：Servlet，如果你想开发一个Servlet程序，只需要完成两个小步骤：<blockquote><ul><li>编写一个类，实现Servlet接口</li><li>把开发好的Java类部署到Web服务器中。<br>把实现了Servlet接口的Java程序叫做，Servlet</li></ul></blockquote></li></ul><h3 id="6-2、HelloServlet"><a href="#6-2、HelloServlet" class="headerlink" title="6.2、HelloServlet"></a>6.2、HelloServlet</h3><ol><li>编写一个Servlet程序<blockquote><ol><li>编写一个普通类</li><li>实现Servlet接口，这里我们直接继承HttpServlet </li></ol></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class HelloServlet extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        PrintWriter writer &#x3D; resp.getWriter();&#x2F;&#x2F;响应流</span><br><span class="line">        writer.print(&quot;HelloServlet！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>编写Servlet的映射<br>为什么需要映射：我们写的是Java程序，但是要通过浏览器访问，而浏览器需要连接web服务器，所有我们需要再web服务中注册我们写的Servlet，还需要给他一个浏览器能够访问的路径;</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--    注册Servlet--&gt;</span><br><span class="line">    &lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;Hello&lt;&#x2F;servlet-name&gt;</span><br><span class="line">        &lt;servlet-class&gt;com.example.servlet_02.HelloServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line">    &lt;&#x2F;servlet&gt;</span><br><span class="line">    &lt;servlet-mapping&gt;</span><br><span class="line">        &lt;servlet-name&gt;Hello&lt;&#x2F;servlet-name&gt;</span><br><span class="line">        &lt;url-pattern&gt;&#x2F;hello&lt;&#x2F;url-pattern&gt;</span><br><span class="line">    &lt;&#x2F;servlet-mapping&gt;</span><br></pre></td></tr></table></figure><h3 id="6-3、Servlet原理"><a href="#6-3、Servlet原理" class="headerlink" title="6.3、Servlet原理"></a>6.3、Servlet原理</h3><p><img src="https://gitee.com/makeitsimple/picture-bed/raw/master/img/Servlet%E5%8E%9F%E7%90%86.png" alt="Servlet"></p><h3 id="6-4、Mapping问题"><a href="#6-4、Mapping问题" class="headerlink" title="6.4、Mapping问题"></a>6.4、Mapping问题</h3><ol><li>一个Servlet可以指定一个映射路径</li><li>一个Servlet可以指定多个映射路径</li><li>一个Servlet可以指定通用映射路径</li><li>指定一些后缀或者前缀等等。。。</li></ol><h2 id="7、ServletContext"><a href="#7、ServletContext" class="headerlink" title="7、ServletContext"></a>7、ServletContext</h2><h3 id="共享数据"><a href="#共享数据" class="headerlink" title="共享数据"></a>共享数据</h3><p>web容器在启动的时候，他会为每个web程序都创建一个对应的ServletContext对象，他代表了当期的web应用；</p><ul><li>共享数据</li><li>我在这个Servlet中保存的数据，可以在另外一个Servlet中拿到；</li></ul><p>第一步创建存放数据的Servlet的类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class HelloServlet extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        ServletContext context &#x3D; this.getServletContext();&#x2F;&#x2F;Servlet上下文</span><br><span class="line"></span><br><span class="line">        String username &#x3D; &quot;小阳同学&quot;;</span><br><span class="line">        context.setAttribute(&quot;username&quot;,username);&#x2F;&#x2F;将一个数据保存在了ServletContext，名字：username,值：username</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步创建获取数据的Servlet的类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class getServlet extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        ServletContext context &#x3D; this.getServletContext();</span><br><span class="line">        String usernume &#x3D; (String)context.getAttribute(&quot;username&quot;);</span><br><span class="line">        resp.setContentType(&quot;text&#x2F;html&quot;);</span><br><span class="line">        resp.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">        resp.getWriter().print(usernume);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第三步配置web.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">       &lt;servlet-name&gt;Hello&lt;&#x2F;servlet-name&gt;</span><br><span class="line">       &lt;servlet-class&gt;com.example.servlet_02.HelloServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line">   &lt;&#x2F;servlet&gt;</span><br><span class="line">   &lt;servlet-mapping&gt;</span><br><span class="line">       &lt;servlet-name&gt;Hello&lt;&#x2F;servlet-name&gt;</span><br><span class="line">       &lt;url-pattern&gt;&#x2F;hello&lt;&#x2F;url-pattern&gt;</span><br><span class="line">   &lt;&#x2F;servlet-mapping&gt;</span><br><span class="line">   &lt;servlet&gt;</span><br><span class="line">       &lt;servlet-name&gt;getServlet&lt;&#x2F;servlet-name&gt;</span><br><span class="line">       &lt;servlet-class&gt;com.example.servlet_02.getServlet&lt;&#x2F;servlet-class&gt;</span><br><span class="line">   &lt;&#x2F;servlet&gt;</span><br><span class="line">   &lt;servlet-mapping&gt;</span><br><span class="line">       &lt;servlet-name&gt;getServlet&lt;&#x2F;servlet-name&gt;</span><br><span class="line">       &lt;url-pattern&gt;&#x2F;getServlet&lt;&#x2F;url-pattern&gt;</span><br><span class="line">   &lt;&#x2F;servlet-mapping&gt;</span><br></pre></td></tr></table></figure><p>第四步测试访问！成功获取数据。</p><h3 id="获取初始化参数"><a href="#获取初始化参数" class="headerlink" title="获取初始化参数"></a>获取初始化参数</h3><p>配置web.xml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;context-param&gt;</span><br><span class="line">       &lt;param-name&gt;url&lt;&#x2F;param-name&gt;</span><br><span class="line">       &lt;param-value&gt;http:&#x2F;&#x2F;localhost:8080&#x2F;servlet_02_war&#x2F;getServlet&lt;&#x2F;param-value&gt;</span><br><span class="line">   &lt;&#x2F;context-param&gt;</span><br><span class="line">&lt;servlet&gt;</span><br><span class="line">       &lt;servlet-name&gt;url&lt;&#x2F;servlet-name&gt;</span><br><span class="line">       &lt;servlet-class&gt;com.example.servlet_02.Url&lt;&#x2F;servlet-class&gt;</span><br><span class="line">   &lt;&#x2F;servlet&gt;</span><br><span class="line">   &lt;servlet-mapping&gt;</span><br><span class="line">       &lt;servlet-name&gt;url&lt;&#x2F;servlet-name&gt;</span><br><span class="line">       &lt;url-pattern&gt;&#x2F;url&lt;&#x2F;url-pattern&gt;</span><br><span class="line">   &lt;&#x2F;servlet-mapping&gt;</span><br></pre></td></tr></table></figure><p>写一个获取初始化参数的类</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Url extends HttpServlet &#123;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        ServletContext context &#x3D; this.getServletContext();</span><br><span class="line">        String url &#x3D; context.getInitParameter(&quot;url&quot;);</span><br><span class="line">        resp.getWriter().print(url);</span><br><span class="line">    &#125;</span><br><span class="line">    @Override</span><br><span class="line">    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException &#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/03/12/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/"/>
      <url>2021/03/12/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="title-软件工程"><a href="#title-软件工程" class="headerlink" title="title:软件工程"></a>title:软件工程</h2><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="软件的定义"><a href="#软件的定义" class="headerlink" title="软件的定义"></a>软件的定义</h2><p>软件是计算机中与硬件相互依存的另一部分，软件包括程序、数据及其相关文档的完整集合<br>软件 = 程序 + 数据 + 文档</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/03/12/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
      <url>2021/03/12/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<hr><h2 id="title-软件测试"><a href="#title-软件测试" class="headerlink" title="title:软件测试"></a>title:软件测试</h2><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>定义：使用人工或自动的手段来运行或测定某个软件系统的过程</p><p>目的：检验系统是否满足规定的需求，或弄清预期结果和实际结果之间的差别</p><ul><li>软件测试为了发现程序员存在的代码或业务逻辑错误</li><li>软件测试为了检验产品是否符合用户需求</li><li>软件测试为了提高用户的体验</li></ul><p>过程：测试需求分析、测试计划、测试设计、测试执行、测试评估</p><p>原则(经验性原则)：</p><ol><li>所有的测试活动都应该以用户需求(软件需求规格说明书)为标准</li><li>应尽早地和不断进行软件测试，越早发现缺陷，修复缺陷的成本就越低</li><li>程序员应避免检查自己的程序，测试人员应避免执行自己写的测试用例</li><li>尽量避免测试的随意性</li><li>测试的“杀虫剂效应” ————改变思维方式、操作习惯</li><li>完全(穷举)测试是不可能的，测试需要终止</li><li>二八原则（聚集效应）————大部分bug集中在少部分模块中</li><li>对错误结果要进行一个确认过程</li><li>制定严格的测试计划</li><li>设计测试用例时应该考虑到合法的输入和不合法的输入，以及各种边界条件，特殊情况下还要知道极端状态和意外状态</li><li>妥善保存测试过程中的所有文档</li></ol><h2 id="软件测试的对象"><a href="#软件测试的对象" class="headerlink" title="软件测试的对象"></a>软件测试的对象</h2><p>对象：软件、产品、项目、系统<br>    程序(源码、模块、部件、软件)<br>    文档(需求规格说明书、概要设计说明书、详细设计说明书、用户手册等)<br>    数据(字符、图片、视频、音频等)</p><h2 id="测试分类"><a href="#测试分类" class="headerlink" title="测试分类"></a>测试分类</h2><p>按技术划分</p><ul><li>黑盒测试：不关心软件内部，只关心输入输出，主要测试依据是需求文档</li><li>白盒测试：关心软件内部设计和程序实现，主要测试依据是设计文档</li><li>灰盒测试：关心输入输出的正确性，同时也关注内部表现</li></ul><p>按阶段划分</p><ul><li>单元测试：单元测试的粒度最小，一般由开发小组采用白盒方式来测试，主要测试单元是否符合“设计”。</li><li>集成测试(接口测试)：集成测试界于单元测试和系统测试之间，起到“桥梁作用”，一般由开发小组采用白盒加黑盒的方式来测试，既要验证“设计”又要验证“需求”。</li><li>系统测试：系统测试的粒度最大，一般由独立测试小组采用黑盒方式来测试，主要测试系统是否符合“需求规格说明书”</li><li>验收测试：验收测试与系统测试非常相似，主要区別是测试人员不同，验收测试由用户执行。<ul><li>α测试：内部人员通过测试账号，模拟用户进行软件使用测试</li><li>β测试：相当于软件公测，由真实用户测试</li></ul></li></ul><p>按程序是否需要运行进行划分</p><ul><li>静态测试：静态测试指不运行程序，对程序和文档进行分析和检查<ul><li>程序检查：程序员交叉检查</li><li>文档检查：术语、图片、操作流程</li></ul></li><li>动态测试：人工或者自动运行代码，进行测试，黑盒测试、白盒测试、灰盒测试都属于动态测试</li></ul><p>按软件测试质量特性划分</p><ul><li><p>功能测试</p><ul><li>构造正常、异常输入检查输出是否与期望相同。如果两者不一致，即表明功能有误</li><li>功能测试重点在于正确的理解用户需求和如何构造有效测试数据</li></ul></li><li><p>性能测试</p><ul><li>测试软件处理业务的速度</li><li>检验性能是否符合需求</li><li>得到某些性能数据供人们参考</li></ul></li></ul><h2 id=""><a href="#" class="headerlink" title=""></a></h2><p>瀑布模型特点</p><ul><li>相邻阶段顺序性和依赖性</li><li>推迟实现的观点</li><li>质量保证的观点</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Node.js</title>
      <link href="2021/03/12/Node.js/"/>
      <url>2021/03/12/Node.js/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Node的三大特点"><a href="#Node的三大特点" class="headerlink" title="Node的三大特点"></a>Node的三大特点</h2><ul><li>非阻塞I/O</li><li>事件驱动</li><li>单线程</li></ul><h2 id="Node多版本管理工具"><a href="#Node多版本管理工具" class="headerlink" title="Node多版本管理工具"></a>Node多版本管理工具</h2><p>NVM地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;coreybutler&#x2F;nvm-windows&#x2F;releases</span><br></pre></td></tr></table></figure><p>常用命令<br>列出当前电脑所有node版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm list</span><br></pre></td></tr></table></figure><p>显示node是运行在32位还是64位</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm arch</span><br></pre></td></tr></table></figure><p>显示nvm版本。version可简化为v</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm version</span><br></pre></td></tr></table></figure><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><ul><li>进程<ul><li>进程负责为程序的运行提供必备的环境</li><li>进程就相当于工厂中的车间</li></ul></li><li>线程<ul><li>线程是计算机中的最小的计算单位，线程负责执行进程中的程序</li><li>线程就相当于工厂中的工人</li></ul></li></ul><p>node.js是单线程的<br>node.js的奇数为开发板，偶数为稳定版</p><p>node执行外部js文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node demo.js</span><br></pre></td></tr></table></figure><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><p>模块的创建</p><ul><li>在node中，一个js文件就是一个模块</li><li>在node中，每一个js文伴中的js代码部是独立运行在一个函数中，而不是全局作用域，所以一个模块的中的变量和函数在其他模块中无法访问</li></ul><p>模块的引入</p><ul><li>在node中，通过<code>require()</code>函数来引入外部的模块</li><li><code>require()</code>可似传一个文伴的路径作为参数，node将会自动根据该路径来引入外部模块<br>路径如果使用相对路径，必须以.或..开头</li><li>我们可以通过<code>exports</code>来向外部暴露变量和方法，只需要将需要暴给外部的变量或方法设置为<code>exports</code>的属性即可<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.x = <span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="built_in">exports</span>.demo = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一次暴露多个</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    x = <span class="string">&quot;123&quot;</span>,</span><br><span class="line">    demo() &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>模块的标识<br>核心模块的标识就是文件名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require(&quot;fs&quot;)</span><br></pre></td></tr></table></figure><p>文件模块的标识是文件路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">require(&quot;.&#x2F;demo&quot;)</span><br></pre></td></tr></table></figure><h2 id="创建服务器"><a href="#创建服务器" class="headerlink" title="创建服务器"></a>创建服务器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入HTTP模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建HTTP服务器</span></span><br><span class="line"><span class="keyword">const</span> httpServer = http.createServer(<span class="function">(<span class="params">req,res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 设置响应头</span></span><br><span class="line">    res.writeHead(<span class="number">200</span>,&#123;<span class="string">&quot;Content-Type&quot;</span> : <span class="string">&quot;text/plain;charset=utf-8&quot;</span>&#125;);</span><br><span class="line">    res.end(<span class="string">&quot;Hello World 你好世界&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动HTTP服务器</span></span><br><span class="line">httpServer.listen(<span class="number">8080</span>,<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;服务器在8080端口上监听!&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>包结构</p><ul><li>package.json 描述文件(必须) 注：描述文件内不能写注释</li><li>bin 可执行二进制文件</li><li>lib 外部依赖的一些js代码</li><li>doc 文档</li><li>test 单元测试</li></ul><p>自动创建package.json</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br><span class="line">npm init -y 跳过询问创建</span><br></pre></td></tr></table></figure><h2 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h2><p>node包管理工具,node自带</p><p>npm命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">npm -v 查看npm版本</span><br><span class="line">npm version 查看所有模块版本</span><br><span class="line">npm search 包名 搜索包</span><br><span class="line">npm install &#x2F; i 包名 安装包(会自动添加到依赖表)</span><br><span class="line">npm remove &#x2F; r 包名 删除包</span><br><span class="line">npm install 下载当前项目所依赖的包</span><br><span class="line">npm install 包名 -g 全局安装包(全局安装的包一般都是一些工具)</span><br></pre></td></tr></table></figure><p>安装cnpm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cnpm -g --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h2 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h2><p>Buffer（缓冲区）</p><ul><li>Buffer的结构和数组很像，操作的方法也和数组类似</li><li>数组中不能存二进制的文件，而Buffer就是专门用来存储二进制数据的</li><li>使用Buffer.不需要引入模块，直接使用即可</li><li>在Buffer中存储的都是二进制数据，但是在显示时部是以16进制的形式显示</li><li>Buffer中的每一个元素的范围是0-255</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接放入数据，自动创建Buffer</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">Buffer.from(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建指定长度的Buffer</span></span><br><span class="line"><span class="keyword">var</span> buf = Buffer.alloc(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 填充数据</span></span><br><span class="line">buf[<span class="number">0</span>] = <span class="number">44</span>;</span><br></pre></td></tr></table></figure><h2 id="fs-文件模块"><a href="#fs-文件模块" class="headerlink" title="fs(文件模块)"></a>fs(文件模块)</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入fs模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br></pre></td></tr></table></figure><p>同步文件写入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打开文件</span></span><br><span class="line">fs.openSync(path,flags,[mode])</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- path 打开文件的路径</span></span><br><span class="line"><span class="comment">- flags 打开文件的操作类型 r或者w</span></span><br><span class="line"><span class="comment">- mode 设置文件的操作权限，一般不传</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">该方法会返回一个文件的描述符，便于我们操作文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 编写文件</span></span><br><span class="line">fs.writeSync(fd,string,[position],[encoding])</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- fd 文件的描述符</span></span><br><span class="line"><span class="comment">- string 要写入的内容</span></span><br><span class="line"><span class="comment">- position 写入的起始位置，一般不传</span></span><br><span class="line"><span class="comment">- encoding 编码，一般不传</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 关闭文件</span></span><br><span class="line">fs.closeSync(fd);</span><br><span class="line"><span class="comment">// fd 文件的描述符</span></span><br></pre></td></tr></table></figure><p>异步文件写入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打开文件</span></span><br><span class="line">fs.open(path[, flags[, mode]], callback)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">- 异步调用的方法，结果都是通过回调函数的参数返回的</span></span><br><span class="line"><span class="comment">- 参数一：err 错误对象，如果没有错误则为null</span></span><br><span class="line"><span class="comment">- 参数二：fd 文件描述符</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Demo</span></span><br><span class="line">fs.open(<span class="string">&quot;hello.txt&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,fd</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err) &#123;</span><br><span class="line">        fs.write(fd,<span class="string">&quot;今天天气真好&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!err) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&quot;写入成功&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            fs.close(fd,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(!err) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">&quot;文件已关闭&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>简单文件操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">// 简单文件写入</span></span><br><span class="line">fs.writeFile(<span class="string">&quot;hello.txt&quot;</span>,<span class="string">&quot;今天天气真好&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;写入成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 简单文件读取，data默认是一个buffer对象，用toString()方法可以转换成字符串</span></span><br><span class="line">fs.readFile(<span class="string">&quot;hello.txt&quot;</span>,<span class="string">&quot;今天天气真好&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>文件流操作(操作大文件)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建输入流</span></span><br><span class="line"><span class="keyword">var</span> ws = fs.createWriteStream(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line">ws.write(<span class="string">&quot;今天天气真好&quot;</span>);</span><br><span class="line"><span class="comment">// 关闭输入流</span></span><br><span class="line">ws.close();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建输出流</span></span><br><span class="line"><span class="keyword">var</span> rs = fs.createReadStream(<span class="string">&quot;hello.txt&quot;</span>);</span><br><span class="line"><span class="comment">// 绑定data事件，自动读取，读取完后自动关闭</span></span><br><span class="line">rs.on(<span class="string">&quot;data&quot;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// pipe()可以将输出流中的内容，直接输出到输入流中，并完成关闭</span></span><br><span class="line">rs.pipe(ws);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS层叠样式表</title>
      <link href="2021/02/02/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/"/>
      <url>2021/02/02/CSS%E5%B1%82%E5%8F%A0%E6%A0%B7%E5%BC%8F%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="CSS字体属性"><a href="#CSS字体属性" class="headerlink" title="CSS字体属性"></a>CSS字体属性</h2><h3 id="字体系列"><a href="#字体系列" class="headerlink" title="字体系列"></a>字体系列</h3><p>CSS使用font-family属性定义文本字体系列  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p &#123;font-family: &quot;微软雅黑&quot;;&#125;</span><br><span class="line">div &#123;font-famliy: &quot;Microsoft Yahei&quot;,&quot;微软雅黑&quot;;&#125;</span><br></pre></td></tr></table></figure><ul><li>各种字体之间必须使用逗号隔开</li><li>一般情况下，如果有空格隔开的多个单词组成的字体，加引号</li><li>尽量使用系统默认自带的字体，保证任何用户的浏览器都能正确显示</li></ul><h3 id="字体大小"><a href="#字体大小" class="headerlink" title="字体大小"></a>字体大小</h3><p>CSS使用font-size属性定义字体大小</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-size: 20px;</span><br></pre></td></tr></table></figure><ul><li>px大小是我们网页的最常用的单位</li><li>谷歌浏览器默认字体大小为16px</li><li>不同浏览器可能默认显示字号不一致，我们尽量给一个明确大小，不要默认大小</li><li>可以给body指定整个页面文字的大小</li></ul><h3 id="字体粗细"><a href="#字体粗细" class="headerlink" title="字体粗细"></a>字体粗细</h3><p>CSS使用font-weight属性设置文本字体的粗细</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-weight: bold</span><br></pre></td></tr></table></figure><ul><li>normal:默认值(不加粗的)</li><li>bold：定义粗体</li><li>100-900：400等于normal，700等于bold，后面不用跟单位</li></ul><h3 id="文字样式"><a href="#文字样式" class="headerlink" title="文字样式"></a>文字样式</h3><p>CSS使用font-style属性设置文本的风格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font-style: normal;</span><br></pre></td></tr></table></figure><ul><li>normal:默认值，浏览器会显示标准的字体样式</li><li>italic：浏览器会显示斜体的字体样式</li></ul><h3 id="字体的复合属性"><a href="#字体的复合属性" class="headerlink" title="字体的复合属性"></a>字体的复合属性</h3><p>字体属性可以把以上文字样式综合来写，这样可以节约代码；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">font： font-style font-weight font-size font-family;</span><br></pre></td></tr></table></figure><ul><li>使用font属性时，必须按上面语法格式中的顺序写，不能更换顺序，并且各个属性间以空格隔开</li><li>不需要设置的属性可以省略，但是必须保留font-size和font-fanily属性，否则font不起作用</li></ul><h2 id="文本属性"><a href="#文本属性" class="headerlink" title="文本属性"></a>文本属性</h2><ul><li>color：文本颜色</li><li>text-align：文本对齐</li><li>text-indent：文本缩进(单位：n*em)</li><li>text-decoration: 添加下划线underline，取消下划线none</li><li>line-height：设置行高</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">p&#123;</span><br><span class="line">        color: yellow;</span><br><span class="line">        text-align: center;</span><br><span class="line">        text-indent: 2em;</span><br><span class="line">        text-decoration: underline;</span><br><span class="line">        line-height: 5px;</span><br><span class="line">        font-size: 90px;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Emmet语法"><a href="#Emmet语法" class="headerlink" title="Emmet语法"></a>Emmet语法</h2><h3 id="快速生成HTML结构语法"><a href="#快速生成HTML结构语法" class="headerlink" title="快速生成HTML结构语法"></a>快速生成HTML结构语法</h3><p>1.生成标签直接输入标签名按tab键即可比如div 然后tab键 ,就可以生成&lt; div &gt; &lt;/ div &gt;2.如果想要生成多个相同标签加上<em>就可以了比如div</em>3 就可以快速生成3个div</p><p>3.如果有父子级关系的标签,可以用&gt;比如ul&gt; |i就可以</p><p>4.如果有兄弟关系的标签,用+就可以了比如div+p</p><p>5.如果生成带有类名或者id名字的，直接写.demo 或者#two tab 键就可以</p><p>6.如果生成的div类名是有顺序的,可以用自增符号$</p><p>7.如果想要在生成的标签内部写内容可以用{}示</p><h3 id="快速格式化代碍"><a href="#快速格式化代碍" class="headerlink" title="快速格式化代碍"></a>快速格式化代碍</h3><p>Vscode快速格式化代碕: shift+alt+f</p><p>也可以没置当我仞保存更面的吋候自劫格式化代碕:1)文件—-.- [首迭項] —— [没置] ;2 )捜索emmet.include;</p><p>3 )在settings.json下的[用戸]中添加以下語句:”editor.formatOnType*: true,</p><p>“editor.formatOnSave*: true</p><p>只需要没置- -次即可,以后都可以自劫保存格式化代碍</p><h2 id="CSS的三大特性"><a href="#CSS的三大特性" class="headerlink" title="CSS的三大特性"></a>CSS的三大特性</h2><p>层叠性、继承性、优先级</p><h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><p>相同选择器给设置相同的样式，此时一一个样式就会覆盖(层叠)另-一个冲突的样式。层叠性主要解决样式冲突的问题</p><p>层桑性原则:</p><ul><li><p>样式冲突,遵循的原则是就近原则,哪个样式离结构近,就执行哪个样式</p></li><li><p>样式不冲突,不会层叠</p></li></ul><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><p>行高的继承性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">font:12px&#x2F;1.5 Microsoft YaHei ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>行可以跟单位也可以不跟单位</p></li><li><p>如果子元素没有设置行高,则会继承元素的行高为1.5</p></li><li><p>此时子元素的行高是 :当前子元素的文字大小* 1.5</p></li><li><p>body行高1.5 这样写法最大的优势就是里面子元素可以根据自文字大小自动调整行高</p></li></ul><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><p>优先级注意点:</p><ul><li><p>权重是有4组数字组成但是不会有进位。</p></li><li><p>可以理解为类选择器永远大于元素选择器id选择器永远大于类选择器,以此类推..</p></li><li><p>等级判断从左向右,如果某一位数值相同,则判断下一位数值。</p></li><li><p>可以简单记忆法:通配符和继承权重为0,标签选择器为1,类(伪类)选择器为10, id选择器100,行内样式表为1000, !important无究大.</p></li><li><p>继承的权重是0 ,如果该元素没有直接选中,不管父元素权重多高,元素得到的权重都是0.</p></li></ul><p>选择器权重如下表所际。</p><p>选择器权重：<br>|  选择器   | 权重  |<br>|  —-  | —-  |<br>| 继承或者*  | 0,0,0,0 |<br>| 类选择器，伪类选择器  | 0,0,1,0 |<br>| ID选择器  | 0,1,0,0 |<br>| 行内样式style=””  | 1,0,0,0 |<br>| limportant 重要的  | ∞无穷大 |</p><p>权重的叠加：权重的叠加不会进位，永远不会</p><h2 id="CSS的背景"><a href="#CSS的背景" class="headerlink" title="CSS的背景"></a>CSS的背景</h2><p>通过CSS背景属性，可以给页面元素添加背景样式。<br>背景属性可以设置背景颜色、背景图片、背景平铺、背景图片位置、背景图像固定等。</p><h3 id="背景颜色"><a href="#背景颜色" class="headerlink" title="背景颜色"></a>背景颜色</h3><p>background-color属性定义元素背景颜色。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-color: 颜色值;</span><br></pre></td></tr></table></figure><p>一般情况下元素背景颜色默认值是transparent(透明),我们也可以手动指定背景颜色为透明。</p><h3 id="背景图片"><a href="#背景图片" class="headerlink" title="背景图片"></a>背景图片</h3><p>background-image属性描述了元素的背景图像，实际开发常见于logo或者一些装饰的小图片或者超大的背景图片，优点非常便于控制位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-image:none(无背景图) | url(路径)</span><br></pre></td></tr></table></figure><h3 id="背景平铺"><a href="#背景平铺" class="headerlink" title="背景平铺"></a>背景平铺</h3><p>如果需要在HTML页面是对背景图像进行平铺，可以用background-repeat属性。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-repeat:repeat | no-repeat | repeat-x |repeat-y</span><br></pre></td></tr></table></figure><ul><li>repeat: 纵向和横向上平铺</li><li>no-repeat：不平铺</li><li>repeat-x： 横向平铺</li><li>repeat-y: 纵向平铺</li></ul><h3 id="背景图片位置"><a href="#背景图片位置" class="headerlink" title="背景图片位置"></a>背景图片位置</h3><p>利用background-position属性可以改变图片在背景的位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-position: x y;</span><br></pre></td></tr></table></figure><p>注意：参数代表的意思是：x坐标和y坐标。可以使用方位名词或者精确单位</p><table><thead><tr><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td>length</td><td>百分数或由浮点数字和单位标识符组成的长度值</td></tr><tr><td>position</td><td>top/center/bottom/left/center/right 方位名词</td></tr></tbody></table><h3 id="背景图像固定"><a href="#背景图像固定" class="headerlink" title="背景图像固定"></a>背景图像固定</h3><p>background-attachment属性设置背景图像是否固定或者随着页面的其余部分滚动。<br>background-attachment后期可以做视差滚动效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background-attachment:  scroll | fixed</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>scroll</td><td>背景图像随对象内容滚动</td></tr><tr><td>fixed</td><td>背景图像固定</td></tr></tbody></table><h3 id="背景复合写法"><a href="#背景复合写法" class="headerlink" title="背景复合写法"></a>背景复合写法</h3><p>为了简化背景属性的代码,我们可以将这些属性合并简写在同一个属性background中。从而节约代码量</p><p>当使用简写属性时,没有特定的书写顺序,-般习惯约定顺序为:</p><p>background:背景颜色背景图片地址背景平铺背景图像滚动背景图片位置;</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">background: transparent url (image.jpg) repeat-y fixed top ;</span><br></pre></td></tr></table></figure><p>这是实际开发中,我们更提倡的写法。</p><h3 id="背景色半透明"><a href="#背景色半透明" class="headerlink" title="背景色半透明"></a>背景色半透明</h3><p>CSS3为我们提供了背景颜色半透明的效果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">    background: rgba(0, 0, 0, 0.3);</span><br><span class="line">&#96;&#96;&#96;&#96;</span><br><span class="line"></span><br><span class="line">* 后一个参数是alpha透明度,取值范围在0~1之间</span><br><span class="line">* 我们习惯把0.3 的0省略掉,写为background: rgba(0,0,0, .3);</span><br><span class="line">* 注意:背景半透明是指盒子背景半透明,里面的内容不受影响●CSS3 新增属性,是IE9+版本浏览器才支持的</span><br><span class="line"></span><br><span class="line">### 背景总结</span><br><span class="line"></span><br><span class="line">|属性|作用|值|</span><br><span class="line">|----|----|----|</span><br><span class="line">|background-color|背景颜色|预定义颜色值|</span><br><span class="line">|background-image|背景图片|url图片路径|</span><br><span class="line">|background-repeat|是否平铺|repeat &#x2F; no-repeat &#x2F; repeat-x &#x2F;repeat-y|</span><br><span class="line">|background-position|背景位置|length&#x2F;position|</span><br><span class="line">|background-attachment|背景附着|scroll滚动、fixed固定|</span><br><span class="line">|背景色半透明|背景色半透明|background: rgba(0, 0, 0, 0.3);|</span><br><span class="line"></span><br><span class="line">## CSS复合选择器</span><br><span class="line"></span><br><span class="line">|选择器|作用|特征|使用情况|隔开符号及用法|</span><br><span class="line">|----|----|----|----|----|</span><br><span class="line">|后代选择器|用来选择后代元素|可以是子孙后代|较多|符号是空格 .nav a|</span><br><span class="line">|子代选择器|选择最近一级元素|只选亲儿子|较少|符号大于 .nav&gt;p|</span><br><span class="line">|并集选择器|选择某些相同样式的元素|可以用于集体声明|较多|符号是逗号 .nav,header|</span><br><span class="line">|链接伪类选择器|选择不同状态的链接|跟链接相关|较多|重点记住a&#123;&#125;和a:hover实际开发的写法|</span><br><span class="line">|：focus选择器|选择获得光标的表单|跟表单相关|较少|input：focus 记住这个写法|</span><br><span class="line"></span><br><span class="line">### 链接伪类选择器</span><br><span class="line"></span><br><span class="line">* a:link(选择所以未被访问的链接)</span><br><span class="line">* a:visited(选择所有已被访问的链接)</span><br><span class="line">* a:hover(选择鼠标指针位于其上的链接)</span><br><span class="line">* a:active(选择活动链接，鼠标按下未弹起的链接)</span><br><span class="line"></span><br><span class="line">## CSS的元素显示模式</span><br><span class="line"></span><br><span class="line">### 块元素</span><br><span class="line"></span><br><span class="line">常见的块元素有&lt; h1 &gt;~&lt; h6 &gt;. &lt; p &gt;、&lt; div &gt;、 &lt; ul &gt;、 &lt; ol &gt;、 &lt; li &gt;等 ,中&lt; div &gt;标签是最典型的块元素。</span><br><span class="line">块级元素的特点:  </span><br><span class="line">1. 比较霸道,己独占-行。  </span><br><span class="line">2. 度,宽度、外边距以及内边距都可以控制。③宽度默认是容器(父级宽度)的100%。  </span><br><span class="line">3. 是一个容器及盒子,面可以放行内或者块级元素。  </span><br><span class="line">4. 文字类的元素内不能使用块级元素  </span><br><span class="line">5. &lt; p &gt;标签主要用于存放文字,因此&lt; p &gt;面不能放块级元素,特别是不能放&lt; div &gt;  </span><br><span class="line">6. 同理，&lt; h1 &gt;~&lt; h6 &gt;等都是文字类块级标签,里面也不能放其他块级元素  </span><br><span class="line">### 行内元素</span><br><span class="line"></span><br><span class="line">常见的行内元素有&lt; a &gt;、&lt; strong &gt;、 &lt; b &gt;. &lt; em &gt;、&lt; i &gt;、 &lt; del &gt;、 &lt; S &gt;、 &lt; ins &gt;. &lt; u &gt;. &lt; span &gt;等 ,中&lt; span &gt;标签是最典型的行内元素。有的地方也将行内元素称为内联元素。</span><br><span class="line"></span><br><span class="line">行内元素的特点:</span><br><span class="line">* 相邻行内元素在一行上, - -行可以示多个。②高宽直接设置是无效的。</span><br><span class="line">* 默认宽度就是它本身内容的宽度。</span><br><span class="line">* 行内元素只能容纳文本或其他行内元素。</span><br><span class="line">* 链接里面不能再放链接</span><br><span class="line">* 特殊情况链接&lt; a &gt;面可以放块级元素,但是给&lt; a &gt;转换一 下块级模式最安全</span><br><span class="line"></span><br><span class="line">### 行内块元素</span><br><span class="line"></span><br><span class="line">在行内元素中有几个特殊的标签一&lt; img&#x2F; &gt;、 &lt; input&#x2F; &gt;. &lt; td &gt; ,它们同时具有块元素和行内元素的特点。有些资料称它们为行内块元素。</span><br><span class="line"></span><br><span class="line">行内块元素的特点:</span><br><span class="line"></span><br><span class="line">* 和相邻行内元素(行内块)在一行上,但是他们之间会有空白缝隙。- 行可以多个(行内元素特点)。②默认宽度就是它本身内容的宽度(行内元素特点)。</span><br><span class="line">* 度,行高、外边距以及内边距都可以控制(块级元素特点)。</span><br><span class="line"></span><br><span class="line">### 元素显示模式转换</span><br><span class="line"></span><br><span class="line">特殊情况下，我们需要元素模式的转换，简单的理解：一个模式的元素需要另一种模式的特性  </span><br><span class="line">比如说想要增加链接&lt; a &gt;的触发范围。</span><br><span class="line"></span><br><span class="line">* 转换为块元素：display：block;</span><br><span class="line">* 转换为行内元素：display： inline;</span><br><span class="line">* 转换为行类块元素：display： inline-block;</span><br><span class="line"></span><br><span class="line">## 盒子模型</span><br><span class="line">### 边框(border)</span><br><span class="line">border可以设置元素的边框，边框有三部分组成边框宽度、边框样式、边框颜色</span><br><span class="line"></span><br><span class="line">语法：</span><br><span class="line">&#96;&#96;&#96; border</span><br><span class="line">border : border-width || border-style || border-color</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>border-width</td><td>定义边框粗细，单位px</td></tr><tr><td>border-style</td><td>边框样式，solid=实线边框、dotted=点线边框、dashed=虚线边框</td></tr><tr><td>border-color</td><td>边框颜色</td></tr></tbody></table><h4 id="边框会影响盒子实际大小"><a href="#边框会影响盒子实际大小" class="headerlink" title="边框会影响盒子实际大小"></a>边框会影响盒子实际大小</h4><p>边框会额外增加盒子的实际大小，因此我们有两种方法解决：  </p><ol><li>测量盒子大小的时候，不量边框</li><li>如果测量的时候包含了边框，width/height减去边框宽度</li></ol><h3 id="表格的细线边框"><a href="#表格的细线边框" class="headerlink" title="表格的细线边框"></a>表格的细线边框</h3><p>border-collapse属性控制浏览器绘制表格边框的方式。它控制相邻单元格的边框。<br>语法：  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">border-collapse : collapse;</span><br></pre></td></tr></table></figure><ul><li>collapse单词是合并的意思</li><li>border-collapse : collapse;表示相邻边框合并在一起</li></ul><h3 id="内边距-padding"><a href="#内边距-padding" class="headerlink" title="内边距(padding)"></a>内边距(padding)</h3><p>padding属性用于设置内边距，即边框与内容之间的距离<br>|属性|作用|<br>|—-|—-|<br>|padding-left|左边距|<br>|padding-right|右边距|<br>|padding-top|上边距|<br>|padding-bottom|下边距|</p><p>合并写法：<br>|值的个数|表达的意思|<br>|—-|—-|<br>|padding：5px|一个值，代表上下左右都是5px|<br>|padding：5px 10px|两个值，上下5px和左右10px|<br>|padding：5px 10px 20px|三个值，上5px、左右10px、下20px|<br>|padding：5px 10px 20px 25px |上右下左对应(顺时针)|</p><h4 id="badding会影响盒子实际大小"><a href="#badding会影响盒子实际大小" class="headerlink" title="badding会影响盒子实际大小"></a>badding会影响盒子实际大小</h4><p>当我们给盒子指定了padding值之后，发生了2件事情：</p><ol><li>内容和边框有了距离，添加了内边距  </li><li>padding影响了盒子实际大小。<br>也就是说，如果盒子已经有了宽度和高度，此时再指定内边距，会撑大盒子  </li></ol><p>解决方案：<br>如果保证盒子跟效果图大小保持一致，则让width/height减去多出来的内边距大小即可  </p><h3 id="外边距-margin"><a href="#外边距-margin" class="headerlink" title="外边距(margin)"></a>外边距(margin)</h3><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>margin-left</td><td>左边距</td></tr><tr><td>margin-right</td><td>右边距</td></tr><tr><td>margin-top</td><td>上边距</td></tr><tr><td>margin-bottom</td><td>下边距</td></tr></tbody></table><h4 id="外边距典型应用"><a href="#外边距典型应用" class="headerlink" title="外边距典型应用"></a>外边距典型应用</h4><p>外边距可以让块级盒子水平居中，当必须满足两个条件：  </p><ol><li>盒子必须指定宽度(width)。</li><li>盒子左右的外边距都设置auto。<br>常见的写法，以下的三种都可以：  </li></ol><ul><li>margin-left：aout;  </li><li>margin：0 aout;(推荐使用)</li><li>margin：aout;<br>注意：以上方法是让块级元素水平居中，行内元素或者行内块元素水平居中给其父元素添加text-align：center。</li></ul><h4 id="外边距和并问题"><a href="#外边距和并问题" class="headerlink" title="外边距和并问题"></a>外边距和并问题</h4><p>使用margin定义块级元素的垂直外边距时可能会出现外边距的和并。<br>1.相邻块元素垂直外边距的和并：</p><blockquote><p>当上下相邻的两个块元素(兄弟关系)相遇时，如果上面的元素有下外边距，下面的元素有上外边距，则他们之间的垂直外边距不是上下外边距之和。取两个值中的较大者这种现象被称为相邻块元素垂直外边距的合并。</p><blockquote><p>解决方案：尽量只给一个盒子添加margin值。<br>2. 嵌套块元素垂直外边距的塌陷<br>对于两个嵌套关(父子关系)系的块级盒子，父级元素有上边距同时子元素也有上外边距，此时父元素会塌陷较大的外边距。<br>解决方案：可以给父元素定义上边框、可以为父元素定义上内边距、可以为父元素添加overflow：hidden。(推荐使用)</p></blockquote></blockquote><h3 id="圆角边框-重点"><a href="#圆角边框-重点" class="headerlink" title="圆角边框(重点)"></a>圆角边框(重点)</h3><p>在CSS3中,新增了圆角边框样式,这样我们的盒子就可以变圆角了。(新人福利 ‘border-radius属性用于设置元素的外边框圆角。  </p><p>语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">border- radius :length;</span><br></pre></td></tr></table></figure><p>radius半径(圆的半径)原理: (椭)圆与边框的交集形成圆角效果<br>在CSS3中,新增了圆角边框样式,这样我们的盒子就可以变圆角了。新人福利border-radius属性用于设置元素的外边框圆角。</p><ul><li><p>参数值可以为数值或百分比的形式</p></li><li><p>如果是正方形,想要设置为-个圆,把数值修改为高度或者宽度的一半即可,或者直接写为50%如果是个矩形,设置为高度的一半就可以做</p></li><li><p>该属性是一个简写属性,可以跟四个值,分别代表左上角、右上角、右下角左下角</p></li><li><p>分开写: border-top-left-radius、border-top-right-radius. border- bottom-right-radius和border- bottom-left-ratius</p></li></ul><h3 id="盒子阴影-重点"><a href="#盒子阴影-重点" class="headerlink" title="盒子阴影(重点)"></a>盒子阴影(重点)</h3><p>CSS3中新增了盒子阴影, 我们可以使用box-shadow属性为盒子添加阴影。(新人福利 blur语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">box-shadow: h-shadow v-shadow blur spread color inset;</span><br></pre></td></tr></table></figure><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>h-shadow</td><td>必需。水平阴影的位置。允许负值。</td></tr><tr><td>v-shadow</td><td>必需。垂直阴影的位置。允许负值。</td></tr><tr><td>blur</td><td>可选。模糊距离。</td></tr><tr><td>spread</td><td>可选。阴影的尺寸。</td></tr><tr><td>color</td><td>可选。阴影的颜色。请参阅CSS颜色值。</td></tr><tr><td>inset</td><td>可选。将外部阴影(outset)改为内部阴影。</td></tr></tbody></table><p>注意:</p><p>1.默认的是外阴影(outset),但是不可以写这个单词，否则导致阴影无效</p><p>2.盒子阴影不占用空间,不会影响其他盒子排列。</p><h2 id="浮动-float"><a href="#浮动-float" class="headerlink" title="浮动( float)"></a>浮动( float)</h2><p>什么是浮动?</p><p>float属性用于创建浮动框,将其移动到一边,直到左边缘或右边缘触及包含块或另-个浮动框的边缘。语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123; float: 属性值;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>元素不浮动(默认值)</td></tr><tr><td>left</td><td>元素向左浮动</td></tr><tr><td>right</td><td>元素向右浮动</td></tr></tbody></table><ol><li>浮动的特性(重点)<blockquote><p>脱离标准普通流的控制(浮)移动到指定位置(动)，(俗称脱标)<br>浮动的盒子不再保留原先的位置</p></blockquote></li><li>浮动元素会有行内块元素的特性。</li><li>常见的网页布局<blockquote><p>浮动元素和标准流的父盒子搭配。<br>一个元素浮动了，理论上其余兄弟元素也要浮动。</p></blockquote></li></ol><h3 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h3><p>为什么要清除浮动？  </p><ol><li>父级么高度</li><li>子盒子浮动了</li><li>影响下面布局了，我们就应该清除浮动了<br>推荐使用:父级双伪元素：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.clearfix :before,.clearfix:after&#123;</span><br><span class="line">            content: &quot;&quot;;</span><br><span class="line">            display: table;</span><br><span class="line">        &#125;</span><br><span class="line">.clearfix:after&#123;</span><br><span class="line">            clear: both;</span><br><span class="line">        &#125; </span><br><span class="line">.clearfix &#123;</span><br><span class="line">            zoom: 1;&#x2F;*兼容IE*&#x2F;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><p>定位:将盒子定在某一个位置,所以定位也是在摆放盒子，按照定位的方式移动盒子。定位=定位模式+边偏移.</p><p>定位模式用于指定一个元素在文档中的定位方式。 边偏移则决定了该元素的最终位置。</p><h3 id="定位模式"><a href="#定位模式" class="headerlink" title="定位模式"></a>定位模式</h3><p>定位模式决定元素的定位方式,它通过CSS的position 属性来设置,其值可以分为四个:</p><table><thead><tr><th>值</th><th>语义</th></tr></thead><tbody><tr><td>static</td><td>静态定位</td></tr><tr><td>relative</td><td>相对定位</td></tr><tr><td>absolute</td><td>绝对定位</td></tr><tr><td>fixed</td><td>固定定位</td></tr></tbody></table><h3 id="边偏移"><a href="#边偏移" class="headerlink" title="边偏移"></a>边偏移</h3><p>边偏移就是定位的盒子移动到最终位置。有top、bottom. left 和right 4个属性。<br>边偏移：<br>|属性|实列|描述<br>|—-|—-|—-<br>|top|top: 80px|顶端偏移量,定义元素相对于其父元素上边线的距离。<br>|bottom|bottom: 80px|底部偏移量，定义元素相对于其父元素下边线的距离。<br>|left|left: 80px|左侧偏移量，定义元素相对于其父元素左边线的距离。<br>|right|right: 80px|右侧偏移量，定义元素相对于其父元素右边线的距离</p><h3 id="静态定位"><a href="#静态定位" class="headerlink" title="静态定位"></a>静态定位</h3><p>静态定位就是文档流也就是标准流</p><h3 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h3><p>相对定位是元素在移动位置的时候,是相对于它原来的位置来说的(自恋型)。语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123; position: relative; &#125;</span><br></pre></td></tr></table></figure><p>相对定位的特点: ( 务必记住)</p><ol><li><p>它是相对于自己原来的位置来移动的(移动位置的时候参照点是自己原来的位置)。</p></li><li><p>原来在标准流的位置继续占有 ,后面的盒子仍然以标准流的方式对待它。( 不脱标,继续保留原来位置)因此,相对定位并没有脱标。它最典型的应用是给绝对定位当爹的。。。</p></li></ol><h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><p>绝对定位是元素在移动位置的时候,是相对于它祖先元素来说的(拼爹型)。语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123; position: absolute; &#125;</span><br></pre></td></tr></table></figure><p>绝对定位的特点: ( 务必记住)</p><ol><li>如果没有祖先元素或者祖先元素没有定位,则以浏览器为准定位( Document文档)。</li></ol><h3 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h3><p>固定定位是元素固定于浏览器可视区的位置。主要使用场景:可以在浏览器页面滚动时元素的位置不会改变。<br>语法:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">选择器&#123; position: fixed; &#125;</span><br></pre></td></tr></table></figure><p>固定定位的特点: (务必记住)</p><ol><li>以浏览器的可视窗口为参照点移动元素。</li></ol><ul><li><p>跟父元素没有任何关系</p></li><li><p>不随滚动条滚动。</p></li></ul><ol start="2"><li>固定定位不在占有原先的位置。</li></ol><blockquote><p>固定定位也是脱标的,实固定定位也可以看做是一种特殊的绝对定位。</p></blockquote><h3 id="粘性定位sticky-了解"><a href="#粘性定位sticky-了解" class="headerlink" title="粘性定位sticky(了解)"></a>粘性定位sticky(了解)</h3><p>粘性定位可以被认为是相对定位和固定定位的混合。Sticky 粘性的<br>语法:</p><pre><code>选择器&#123; position: sticky; top: 10px; &#125;</code></pre><p>粘性定位的特点:</p><ol><li><p>以浏览器的可视窗口为参照点移动元素(固定定位特点)2.粘性定位占有原先的位置(相对定位特点)</p></li><li><p>必须添加top、left. right. bottom其中- 个才有效</p></li></ol><h3 id="子绝父相的由来"><a href="#子绝父相的由来" class="headerlink" title="子绝父相的由来"></a>子绝父相的由来</h3><ul><li>弄清楚这个口诀,就明白了绝对定位和相对定位的使用场景。</li><li>这个”子绝父相”太重要了,是我们学习定位的口诀,定位中最常用的一种方式这句话的意思是:子级是绝对定位的话,父级要用相对定位。</li></ul><ol><li>子级绝对定位,不会占有位置,可以放到父盒子里面的任何一个地方,不会影响其他的兄弟盒子。</li><li>盒子需要加定位限制子盒在父盒子内示。</li><li>盒子布局时,需要占有位置,因此父亲只能是相对定位。</li></ol><blockquote><p>这就是子绝父相的由来,所以相对定位经常用来作为绝对定位的父级。</p></blockquote><blockquote><p>总结:因为父级需要占有位置,因此是相对定位，子盒子不需要占有位置,则是绝对定位</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML</title>
      <link href="2021/02/02/HTML5/"/>
      <url>2021/02/02/HTML5/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h1 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h1><ul><li>标题标签h1  </li><li>段落标签和换行标签p、br  </li><li>文本格式化标签粗体、斜体、删除线、下划线，粗体strong或(b)、斜体em或(i)、删除线del或(s)、下划线ins或u  </li><li>div和span没有语义，他们就是一个盒子，用来装内容的(div块级元素，span行内元素)  </li><li>图像标签img src=”图片路径”，其他属性alt(图片不能显示显示的文字)、title(鼠标放图片提示文字)、width和height(设置图片的宽高)、border(设置边框粗细)  </li><li>超链接标签《a href=”跳转网址” target=”目标窗口弹出方式(self原窗口或blank新窗口)”》文本或图像a,点击可以到别的网页  </li><li>注释标签<!-- 注释语句 -->或者//  </li><li>特殊字符，大于号：&amp;gt、小于号：&amp;lt、空格：&amp;nbsp</li></ul><h2 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h2><p>table定义表格的元素<br>h表头标签<br>tr定义表格行<br>td定义单元格<br>合并单元格：跨行合并(rowspan)或跨列合并(colspan)</p><h2 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h2><p>列表是用来布局的，特点整齐、整洁、有序、他作为布局更加自由和方便<br>根据使用情况不同，分为三类：无序、有序、自定义列表  </p><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>&lt; ul &gt;<br>&lt; li &gt;辣条&lt; /li &gt;<br>&lt; li &gt;臭豆腐&lt; /li &gt;<br>&lt; li &gt;烧烤&lt; /li &gt;<br>&lt; /ul &gt;<br>特点没有顺序<br>li标签可以作为一个容器，放任何元素  </p><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>&lt; ol &gt;<br>&lt; li &gt;辣条&lt; /li &gt;<br>&lt; li &gt;臭豆腐&lt; /li &gt;<br>&lt; li &gt;烧烤&lt; /li &gt;<br>&lt; /ol &gt;<br>特点有顺序<br>li标签可以作为一个容器，放任何元素  </p><h3 id="自定义列表"><a href="#自定义列表" class="headerlink" title="自定义列表"></a>自定义列表</h3><p>&lt; dl &gt;<br>&lt; dt &gt;名词&lt; /dt &gt;<br>&lt; dd &gt;名词解释1&lt; /dd &gt;<br>&lt; dd &gt;名词解释2&lt; /dd &gt;<br>&lt; /dl &gt;<br>dt和dd是兄弟关系  </p><h2 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h2><p>分为表单域和表单控件</p><h3 id="表单域"><a href="#表单域" class="headerlink" title="表单域"></a>表单域</h3><p>表单域是一个包含表单元素的区域<br>在HTML标签中，&lt; from &gt;标签用来定以表单域，以实现用户信息的收集与传递<br>&lt; from &gt;会把他包含的表单元素提交给服务器  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;form accept&#x3D;&quot;url地址&quot; method&#x3D;&quot;提交方式&quot; name&#x3D;&quot;表单域名称&quot;&gt;各种表单元素控件&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure><h3 id="表单控件"><a href="#表单控件" class="headerlink" title="表单控件"></a>表单控件</h3><ul><li><p>input输入表单控件  </p><ul><li>以type设置不同属性来指定不同控件  <blockquote><p>text:常规文本输入<br>password:不可见文本输入，用于密码<br>button:普通按钮(和JS用)<br>radio:定义单选按钮<br>checkbox：定义多选按钮<br>submit：提交按钮<br>reset:重置按钮<br>file:文件域，供文件上传  </p></blockquote></li><li>name:定义input元素的名称</li><li>value：规定input的值<br>name和value是每个表单元素都要有的属性值，主要是给后台人员使用<br>name表单的元素名字，要求单选按钮和多选按钮要有相同的name值  </li></ul></li><li><p>&lt; label &gt;标签</p><ul><li>绑定input标签，点击文字锁定文本框，提升用户体验</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;label for&#x3D;&quot;text&quot;&gt; 用户：&lt;&#x2F;label&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;username&quot; id&#x3D;&quot;text&quot;&gt;</span><br></pre></td></tr></table></figure><ul><li>select下拉表单控件  </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;label for&#x3D;&quot;select&quot;&gt;地址：&lt;&#x2F;label&gt;&lt;select name&#x3D;&quot;&quot; id&#x3D;&quot;select&quot;&gt;</span><br><span class="line">        &lt;option value&#x3D;&quot;&quot;&gt;成都&lt;&#x2F;option&gt;</span><br><span class="line">        &lt;option value&#x3D;&quot;&quot;&gt;达州&lt;&#x2F;option&gt;</span><br><span class="line">    &lt;&#x2F;select&gt;</span><br></pre></td></tr></table></figure><ul><li>textarea文本域控件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;label for&#x3D;&quot;te&quot;&gt;反馈：&lt;&#x2F;label&gt;&lt;textarea name&#x3D;&quot;text&quot; id&#x3D;&quot;te&quot; cols&#x3D;&quot;30&quot; rows&#x3D;&quot;10&quot;&gt;&lt;&#x2F;textarea&gt;</span><br></pre></td></tr></table></figure><p>cols：控制每行的字符数<br>rows：控制显示行数  </p><h3 id="练习表单"><a href="#练习表单" class="headerlink" title="练习表单"></a>练习表单</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;青春不常在，抓紧谈恋爱&lt;&#x2F;h3&gt;</span><br><span class="line">    &lt;table border&#x3D;&quot;0&quot; width&#x3D;&quot;500&quot;&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;label for&#x3D;&quot;sex&quot;&gt;性别&lt;&#x2F;label&gt;</span><br><span class="line">            &lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                男&lt;input type&#x3D;&quot;radio&quot; id&#x3D;&quot;sex&quot; checked&#x3D;&quot;checked&quot;&gt; 女&lt;input type&#x3D;&quot;radio&quot; id&#x3D;&quot;sex&quot;&gt;&lt;br&gt;</span><br><span class="line">            &lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">               生日</span><br><span class="line">            &lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;select&gt;</span><br><span class="line">                    &lt;option&gt;选择年&lt;&#x2F;option&gt;</span><br><span class="line">                &lt;&#x2F;select&gt;</span><br><span class="line">                &lt;select&gt;</span><br><span class="line">                    &lt;option&gt;选择月&lt;&#x2F;option&gt;</span><br><span class="line">                &lt;&#x2F;select&gt;</span><br><span class="line">                &lt;select&gt;</span><br><span class="line">                    &lt;option&gt;选择日&lt;&#x2F;option&gt;</span><br><span class="line">                &lt;&#x2F;select&gt;</span><br><span class="line">            &lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;所在地区&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type&#x3D;&quot;text&quot; value&#x3D;&quot;北京&quot;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;婚姻状况&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                未婚&lt;input type&#x3D;&quot;radio&quot; id&#x3D;&quot;ma&quot; checked&#x3D;&quot;checked&quot;&gt; 已婚&lt;input type&#x3D;&quot;radio&quot; id&#x3D;&quot;ma&quot;&gt;&lt;br&gt; 离婚&lt;input type&#x3D;&quot;radio&quot; id&#x3D;&quot;ma&quot;&gt;&lt;br&gt;</span><br><span class="line">            &lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;学历&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type&#x3D;&quot;text&quot; value&#x3D;&quot;大学&quot;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;喜欢类型&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;like&quot;&gt;可爱 &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;like&quot;&gt;御姐 &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;like&quot;&gt;公主 &lt;input type&#x3D;&quot;checkbox&quot; id&#x3D;&quot;like&quot;&gt;萝莉 &lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;自我介绍&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;&lt;textarea id&#x3D;&quot;t&quot; cols&#x3D;&quot;50&quot; rows&#x3D;&quot;2&quot;&gt;&lt;&#x2F;textarea&gt;&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;免费注册&quot;&gt;&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type&#x3D;&quot;checkbox&quot; checked&#x3D;&quot;checked&quot;&gt;我同意注册条款&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;&lt;a href&#x3D;&quot;#&quot;&gt;&lt;ins&gt;我是会员，立即登录&lt;ins&gt;&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;&lt;&#x2F;td&gt;</span><br><span class="line">            &lt;td&gt;&lt;h4&gt;我承诺&lt;&#x2F;h4&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &lt;li&gt;年满18，单身&lt;&#x2F;li&gt;</span><br><span class="line">                    &lt;li&gt;抱着严肃的态度&lt;&#x2F;li&gt;</span><br><span class="line">                    &lt;li&gt;真诚寻找另一半&lt;&#x2F;li&gt;</span><br><span class="line">                &lt;&#x2F;ul&gt;    </span><br><span class="line">            &lt;&#x2F;td&gt;</span><br><span class="line">        &lt;&#x2F;tr&gt;  </span><br><span class="line">    &lt;&#x2F;table&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2020/09/13/hello-world/"/>
      <url>2020/09/13/hello-world/</url>
      
        <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
